#include "pch.h"
#include "SpiFramer.h"
#include "BitRing.h"

uint8_t toFrame[] = { 0x55, 0x55, 0x55, 0x55, 0x55, 0xff, 0x00, 0x33, 0x55, 0x53, 0x55, 0x55 };
uint8_t framedData[] = { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x5f, 0xf0, 0x05, 0x99, 0x55, 0x59, 0x55, 0x55, 0x55 };
uint8_t framedSpiSample[] =
{
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x5F, 0xF0, 0x05, 0x99, 0x55, 0x59, 0x54, 0xAC, 0xAD, 0x4C, 0xCA, 0xD4, 0xB5, 0x2B, 0x4A, 0xD2, 0xB4, 0xCC, 0xAD, 0x4B, 0x52, 0xB4, 0xAD, 0x2B, 0x4A, 0xD5, 0x52, 0xD5,
    0x2D, 0x4A, 0xCA, 0xD2, 0xAC, 0xAB, 0x32, 0xD4, 0xB2, 0xAD, 0x2D, 0x4C, 0xCA, 0xD4, 0xB5, 0x2B, 0x4A, 0xD2, 0xB2, 0xAC, 0xAB, 0x52, 0xCA, 0xB2, 0xD5, 0x2D, 0x4C, 0xCA, 0xD4, 0xB5, 0x2B, 0x4A, 0xD2, 0xB2,
    0xAC, 0xAB, 0x2A, 0xCA, 0xB2, 0xAC, 0xAD, 0x4C, 0xCA, 0xD4, 0xB5, 0x2B, 0x4A, 0xD2, 0xB2, 0xAC, 0xAB, 0x4A, 0xD5, 0x52, 0xD5, 0x2D, 0x4C, 0xCA, 0xD4, 0xB5, 0x2B, 0x4A, 0xD2, 0xB5, 0x55, 0x53, 0x56, 0x55,
    0x55
};

TEST(FramingTests, FrameMessage) {
    uint8_t results[sizeof(framedData)] = {};
    
    bool result = SpiFramer::FrameData(toFrame, sizeof(toFrame), results, sizeof(framedData));
    EXPECT_EQ(result, true);

    for (int i = 0; i < sizeof(framedData); i++) {
        EXPECT_EQ(results[i], framedData[i]);
    }
}

TEST(FramingTests, UnFrameMessage) {
    uint8_t results[sizeof(toFrame)] = {};

    bool result = SpiFramer::UnframeData(framedData, sizeof(framedData), results, sizeof(toFrame));
    EXPECT_EQ(result, true);

    for (int i = 0; i < sizeof(toFrame); i++) {
        EXPECT_EQ(results[i], toFrame[i]);
    }
}

TEST(FramingTests, SyncByte) {
    //This test will simulate the data as seen by the receiving radio by matching the sync bits and then parsing the packet.

    BitRing br;
    br.OpenBytes(framedSpiSample, sizeof(framedSpiSample));
    while (br.Peek(8) != 0xC0)
        br.Read(1);
    ASSERT_EQ(br.Read(8), 0xC0);
    ASSERT_EQ(br.Read(8), 0x16);
    ASSERT_EQ(br.Read(8), 0x65);
    ASSERT_EQ(br.Read(8), 0x55);

    //Now read the data out as the radio would.
    while (br.GetBitCount() >= 8)
        printf("%02x", br.Read(8));

}